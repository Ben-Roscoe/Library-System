#include "DatabaseManager.h"

#include <QSqlQuery>
#include <qvariant.h>
#include <QtDebug>
#include <QSqlError>
#include <QException>



//
// DatabaseManager
//
DatabaseManager::DatabaseManager( QString driver, QString nameDriver, QString fileLocation ) : database( QSqlDatabase::addDatabase( driver ) )
{
    this->driver            = driver;
    this->nameDriver        = nameDriver;
    this->fileLocation      = fileLocation;

    database.connectOptions();
    database.setDatabaseName( QString( "DRIVER=%1;DBQ=%2" ).arg( nameDriver, fileLocation ) );
}



//
// GetDatabase
//
QSqlDatabase& DatabaseManager::GetDatabase()
{
    return database;
}



//
// NewBorrower
//
Borrower DatabaseManager::NewBorrower( const QString& name, const QString& address, float feeTotal, float feeHistory, const QVector<QString>& phoneNumbers )
{
    // Add the borrower.
    QSqlQuery                       query;
    QString                         id;
    QVector<BorrowerNumber>         numbers;

    if( !query.exec( QString( "INSERT INTO Borrower ([fullName],[address],[feeTotal],[feeHistory]) VALUES('%1','%2','%3','%4')" ).arg( name, address, QString::number( feeTotal ), QString::number( feeHistory ) ) ) )
    {
        qDebug() << "Borrower insert Error: ";
        qDebug() << query.lastError().text();
        return Borrower( "", "", "", 0.0f, 0.0f, numbers );
    }

    // We have to find the id generated by the database system. Get all borrowerIDs and the largest
    // should be the last.
    if( !query.exec( QString( "SELECT borrowerID FROM Borrower ORDER BY borrowerID DESC" ) ) )
    {
        qDebug() << "Borrower last ID error: ";
        qDebug() << query.lastError().text();
        return Borrower( "", "", "", 0.0f, 0.0f, numbers );

    }

    if( query.next() )
    {
        id = query.value( 0 ).toString();
    }

    // Add all the phone numbers.
    for( QString number : phoneNumbers )
    {
        if( !query.exec( QString( "INSERT INTO BorrowerNumber ([borrowerID], [phoneNumber]) VALUES('%1','%2')" ).arg( id, number ) ) )
        {
            qDebug() << "Number insert Error: ";
            qDebug() << query.lastError().text();
            continue;
        }
        if( !query.exec( QString( "SELECT borrowerNumberID FROM BorrowerNumber ORDER BY borrowerNumberID DESC" ) ) )
        {
            qDebug() << "Number last ID error: ";
            qDebug() << query.lastError().text();
            continue;
        }

        if( query.next() )
        {
            numbers.push_back( BorrowerNumber( query.value( 0 ).toString(), number ) );
        }
    }

    // Return the new borrower object.
    return Borrower{ id, name, address, feeTotal, feeHistory, numbers };
}



//
// DestroyBorrower
//
void DatabaseManager::DestroyBorrower( const Borrower& borrower )
{
    QSqlQuery               query;

    // Delete the borrower record.
    if( query.exec( QString( "DELETE * FROM Borrower WHERE borrowerID = %1" ).arg( borrower.GetID() ) ) )
    {
        // Delete each phone number.
        if( !query.exec( QString( "DELETE * FROM BorrowerNumber WHERE borrowerID = %1" ).arg( borrower.GetID() ) ) )
        {
            qDebug() << "Delete number Error: ";
            qDebug() << query.lastError().text();
        }
    }
    else
    {
        qDebug() << "Delete borrower Error: ";
        qDebug() << query.lastError().text();
    }
}



//
// NewBook
//
Book DatabaseManager::NewBook( const QString& title, const QString& author, const QString& subject, const QString& publisher, const QDate& publishingDate, const QString& location,
                               Book::Status status, float overdueFine, float cost, const QString& information, Book::Type type )
{
    QSqlQuery           query;
    QString             id;

    if( !query.exec( QString( "INSERT INTO Book ([title], [author], [subject], [publisher], [publishingDate], [location], [status], [overdueFine], [cost], [borrowerID], [dueDate], [information], [type]) VALUES( '%1', '%2', '%3', '%4', %5, '%6', '%7', '%8', %9, %10, %11, '%12', '%13' )" )
                     .arg( title, author, subject, publisher, DateToString( publishingDate ), location, Book::GetStatusString( status ), QString::number( overdueFine ), QString::number( cost ) )
                     .arg( "-1", DateToString( QDate::currentDate() ), information, Book::GetTypeString( type ) ) ) )
    {
        qDebug() << "Error inserting book: ";
        qDebug() << query.lastError().text();
        return Book( "", "", "", "", "", QDate(), "", Book::Status::Available, 0.0f, 0.0f, "", Book::Type::Circulation );
    }

    // We've created the new book, now find it's id.
    if( !query.exec( QString( "SELECT bookID FROM Book ORDER BY bookID DESC" ) ) )
    {
        qDebug() << "Error getting last book ID: ";
        qDebug() << query.lastError().text();
        return Book( "", "", "", "", "", QDate(), "", Book::Status::Available, 0.0f, 0.0f, "", Book::Type::Circulation );
    }

    if( query.next() )
    {
        id = query.value( 0 ).toString();
    }

    return Book( id, title, author, subject, publisher, publishingDate, location, status, overdueFine, cost, information, type );
}



//
// DestroyBook
//
void DatabaseManager::DestroyBook( const Book& book )
{
    QSqlQuery               query;

    if( !query.exec( QString( "DELETE * FROM Book WHERE bookID = %1" ).arg( book.GetID() ) ) )
    {
        qDebug() << "Delete book Error: ";
        qDebug() << query.lastError().text();
    }
}



//
// NewPhoneNumber
//
void DatabaseManager::NewPhoneNumber( const QString& number, Borrower& borrower )
{
    QSqlQuery   query;

    if( !query.exec( QString( "SELECT * FROM BorrowerNumber WHERE borrowerID = %1 AND phoneNumber = '%2'" ).arg( borrower.GetID(), number ) ) )
    {
        qDebug() << "Error checking for duplicate number: " << query.lastError().text();
        return;
    }

    // If this number was not already present.
    if( query.next() )
    {
        qDebug() << "Number is already in database.";
        return;
    }

    if( !query.exec( QString( "INSERT INTO BorrowerNumber ([borrowerID], [phoneNumber]) VALUES('%1','%2')" ).arg( borrower.GetID(), number ) ) )
    {
        qDebug() << "Error inserting number into table: " << query.lastError().text();
        return;
    }
    if( !query.exec( "SELECT borrowerNumberID FROM BorrowerNumber ORDER BY borrowerNumberID DESC" ) )
    {
        qDebug() << "Error getting last number ID: " << query.lastError().text();
    }

    if( query.next() )
    {
        // If the borrower doesn't already contain this number.
        if( borrower.IndexOfPhoneNumber( number ) == -1 )
        {
            borrower.AddPhoneNumber( BorrowerNumber( query.value( 0 ).toString(), number ) );
        }
    }
}



//
// DestroyPhoneNumber
//
void DatabaseManager::DestroyPhoneNumber( const QString& number, Borrower& borrower )
{
    QSqlQuery   query;
    if( query.exec( QString( "DELETE * FROM BorrowerNumber WHERE borrowerID = %1 AND phoneNumber = '%2'" ).arg( borrower.GetID(), number ) ) )
    {
        borrower.RemovePhoneNumber( number );
        return;
    }
    qDebug() << "Error deleting number from database: " << query.lastError().text();
}



//
// Update
//
void DatabaseManager::Update( const Borrower& borrower )
{
    QSqlQuery   query;
    if( !query.exec( QString( "UPDATE Borrower SET fullName = '%1', address = '%2', feeTotal = %3, feeHistory = %4 WHERE borrowerID = %5" ).arg( borrower.GetName(), borrower.GetAddress(),  QString::number( borrower.GetFeeTotal() ), QString::number( borrower.GetFeeHistory() ), borrower.GetID() ) ) )
    {
        qDebug() << "Error updating borrower: ";
        qDebug() << query.lastError().text();
    }
}



//
// Update
//
void DatabaseManager::Update( const Book& book )
{
    QSqlQuery   query;
    QString     command = QString( "UPDATE Book SET title = '%1', author = '%2', subject = '%3', publisher = '%4', location = '%5', information = '%6', publishingDate = %7, dueDate = %8, overdueFine = %9, cost = %10, type = '%11', status = '%12', borrowerID = '%13' WHERE bookID = %14" )
                            .arg( book.GetTitle(), book.GetAuthor(), book.GetSubject(), book.GetPublisher(), book.GetLocation(), book.GetInformation(), DateToString( book.GetPublishingDate() ), DateToString( book.GetDueDate() ), QString::number( book.GetOverdueFine() ) )
                            .arg( QString::number( book.GetCost() ), Book::GetTypeString( book.GetType() ), Book::GetStatusString( book.GetStatus() ), book.GetBorrowerID(), book.GetID() );

    if( !query.exec( command ) )
    {
        qDebug() << "Error updating book: ";
        qDebug() << query.lastError().text();
    }
}



//
// UpdatePhoneNumber
//
void DatabaseManager::Update( const Borrower& borrower, const QString& number )
{
    int         index = borrower.IndexOfPhoneNumber( number );
    if( index <= -1 )
    {
        qDebug() << "Error updating number. The number does not belong to this borrower.";
        return;
    }
    Update( borrower, index );
}



//
// Update
//
void DatabaseManager::Update( const Borrower& borrower, int i )
{
    BorrowerNumber      borrowerNumber = borrower.GetPhoneNumber( i );
    QSqlQuery           query;
    if( !query.exec( QString( "UPDATE BorrowerNumber SET phoneNumber = '%1' WHERE borrowerNumberID = %2" ).arg( borrowerNumber.GetPhoneNumber(), borrowerNumber.GetID() ) ) )
    {
        qDebug() << "Erroer updating number: ";
        qDebug() << query.lastError().text();
        return;
    }
}



//
// UpdatePhoneNumbers
//
void DatabaseManager::UpdatePhoneNumbers( const Borrower& borrower )
{
    QSqlQuery   query;

    for( int i = 0; i < borrower.GetPhoneNumbers().size(); i++ )
    {
        Update( borrower, i );
    }
}



// Private:



//
// DateToString
//
QString DatabaseManager::DateToString( const QDate& date ) const
{
    return QString( "#" ) + date.toString( dateFormat ).replace( ".", "-" ) + QString( "#" );
}
