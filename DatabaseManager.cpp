#include "DatabaseManager.h"

#include <QSqlQuery>
#include <qvariant.h>
#include <QtDebug>
#include <QSqlError>
#include <QException>



//
// DatabaseManager
//
DatabaseManager::DatabaseManager( QString driver, QString nameDriver, QString fileLocation ) : database( QSqlDatabase::addDatabase( driver ) )
{
    this->driver            = driver;
    this->nameDriver        = nameDriver;
    this->fileLocation      = fileLocation;

    database.connectOptions();
    database.setDatabaseName( QString( "DRIVER=%1;DBQ=%2" ).arg( nameDriver, fileLocation ) );
}



//
// GetDatabase
//
QSqlDatabase& DatabaseManager::GetDatabase()
{
    return database;
}



//
// NewBorrower
//
Borrower DatabaseManager::NewBorrower( const QString& name, const QString& address, float feeTotal, float feeHistory, const QVector<QString>& phoneNumbers ) const
{
    // Add the borrower.
    QSqlQuery                       query;
    QString                         id;
    QVector<BorrowerNumber>         numbers;

    if( !query.exec( QString( "INSERT INTO Borrower ([fullName],[address],[feeTotal],[feeHistory]) VALUES('%1','%2','%3','%4')" ).arg( name, address, QString::number( feeTotal ), QString::number( feeHistory ) ) ) )
    {
        qDebug() << "Borrower insert Error: ";
        qDebug() << query.lastError().text();
        return Borrower( "", "", "", 0.0f, 0.0f, numbers );
    }

    // Find the id generated by the DBMS.
    if( !query.exec( "SELECT @@IDENTITY" ) )
    {
        qDebug() << "Borrower last ID error: ";
        qDebug() << query.lastError().text();
    }
    if( query.next() )
    {
        id = query.value( 0 ).toString();
    }

    // Add all the phone numbers.
    for( const QString& number : phoneNumbers )
    {
        if( !query.exec( QString( "INSERT INTO BorrowerNumber ([borrowerID], [phoneNumber]) VALUES('%1','%2')" ).arg( id, number ) ) )
        {
            qDebug() << "Number insert Error: ";
            qDebug() << query.lastError().text();
            continue;
        }

        // Find the id generated by the DBMS.
        if( !query.exec( "SELECT @@IDENTITY" ) )
        {
            qDebug() << "Number last ID error: ";
            qDebug() << query.lastError().text();
            continue;
        }
        if( query.next() )
        {
            numbers.push_back( BorrowerNumber( query.value( 0 ).toString(), number, id ) );
        }
    }

    // Return the new borrower object.
    return Borrower{ id, name, address, feeTotal, feeHistory, numbers };
}



//
// DestroyBorrower
//
void DatabaseManager::DestroyBorrower( const Borrower& borrower ) const
{
    QSqlQuery               query;

    // Delete the borrower record.
    if( query.exec( QString( "DELETE * FROM Borrower WHERE borrowerID = %1" ).arg( borrower.GetID() ) ) )
    {
        // Delete each phone number.
        if( !query.exec( QString( "DELETE * FROM BorrowerNumber WHERE borrowerID = %1" ).arg( borrower.GetID() ) ) )
        {
            qDebug() << "Delete number Error: ";
            qDebug() << query.lastError().text();
        }
    }
    else
    {
        qDebug() << "Delete borrower Error: ";
        qDebug() << query.lastError().text();
    }
}



//
// NewBook
//
Book DatabaseManager::NewBook( const QString& title, const QString& author, const QString& subject, const QString& publisher, const QDate& publishingDate, const QString& location,
                               Book::Status status, float overdueFine, float cost, const QString& information, Book::Type type ) const
{
    QSqlQuery           query;
    QString             id;

    if( !query.exec( QString( "INSERT INTO Book ([title], [author], [subject], [publisher], [publishingDate], [location], [status], [overdueFine], [cost], [borrowerID], [dueDate], [information], [type]) VALUES( '%1', '%2', '%3', '%4', %5, '%6', '%7', '%8', %9, %10, %11, '%12', '%13' )" )
                     .arg( title, author, subject, publisher, DateToString( publishingDate ), location, Book::GetStatusString( status ), QString::number( overdueFine ), QString::number( cost ) )
                     .arg( "-1", DateToString( QDate::currentDate() ), information, Book::GetTypeString( type ) ) ) )
    {
        qDebug() << "Error inserting book: ";
        qDebug() << query.lastError().text();
        return Book( "", "", "", "", "", QDate(), "", Book::Status::Available, 0.0f, 0.0f, "", Book::Type::Circulation );
    }

    // We've created the new book, now find it's id.
    if( !query.exec( QString( "SELECT @@IDENTITY" ) ) )
    {
        qDebug() << "Error getting last book ID: ";
        qDebug() << query.lastError().text();
        return Book( "", "", "", "", "", QDate(), "", Book::Status::Available, 0.0f, 0.0f, "", Book::Type::Circulation );
    }

    if( query.next() )
    {
        id = query.value( 0 ).toString();
    }

    return Book( id, title, author, subject, publisher, publishingDate, location, status, overdueFine, cost, information, type );
}



//
// DestroyBook
//
void DatabaseManager::DestroyBook( const Book& book ) const
{
    QSqlQuery               query;

    if( !query.exec( QString( "DELETE * FROM Book WHERE bookID = %1" ).arg( book.GetID() ) ) )
    {
        qDebug() << "Delete book Error: ";
        qDebug() << query.lastError().text();
    }
}



//
// NewPhoneNumber
//
BorrowerNumber DatabaseManager::NewPhoneNumber( const QString& number, Borrower& borrower ) const
{
    QSqlQuery   query;

    if( !query.exec( QString( "SELECT * FROM BorrowerNumber WHERE borrowerID = %1 AND phoneNumber = '%2'" ).arg( borrower.GetID(), number ) ) )
    {
        qDebug() << "Error checking for duplicate number: " << query.lastError().text();
        return BorrowerNumber();
    }

    // If this number was not already present.
    if( query.next() )
    {
        return BorrowerNumber();
    }

    if( !query.exec( QString( "INSERT INTO BorrowerNumber ([borrowerID], [phoneNumber]) VALUES('%1','%2')" ).arg( borrower.GetID(), number ) ) )
    {
        qDebug() << "Error inserting number into table: " << query.lastError().text();
        return BorrowerNumber();
    }
    if( !query.exec( "SELECT borrowerNumberID FROM BorrowerNumber ORDER BY borrowerNumberID DESC" ) )
    {
        qDebug() << "Error getting last number ID: " << query.lastError().text();
    }

    if( query.next() )
    {
        // If the borrower doesn't already contain this number.
        if( borrower.IndexOfPhoneNumber( number ) == -1 )
        {
            BorrowerNumber      newNumber = BorrowerNumber( query.value( 0 ).toString(), number, borrower.GetID() );
            borrower.AddPhoneNumber( newNumber);
            return newNumber;
        }
    }

    return BorrowerNumber();
}



//
// DestroyPhoneNumber
//
void DatabaseManager::DestroyPhoneNumber( const BorrowerNumber& number ) const
{
    QSqlQuery   query;
    if( query.exec( QString( "DELETE * FROM BorrowerNumber WHERE borrowerID = %1 AND phoneNumber = '%2'" ).arg( number.GetBorrowerID(), number.GetPhoneNumber() ) ) )
    {
        return;
    }
    qDebug() << "Error deleting number from database: " << query.lastError().text();
}



//
// Update
//
void DatabaseManager::Update( const Borrower& borrower ) const
{
    QSqlQuery   query;
    if( !query.exec( QString( "UPDATE Borrower SET fullName = '%1', address = '%2', feeTotal = %3, feeHistory = %4 WHERE borrowerID = %5" ).arg( borrower.GetName(), borrower.GetAddress(),  QString::number( borrower.GetFeeTotal() ), QString::number( borrower.GetFeeHistory() ), borrower.GetID() ) ) )
    {
        qDebug() << "Error updating borrower: ";
        qDebug() << query.lastError().text();
    }
}



//
// Update
//
void DatabaseManager::Update( const Book& book ) const
{
    QSqlQuery   query;
    QString     command = QString( "UPDATE Book SET title = '%1', author = '%2', subject = '%3', publisher = '%4', location = '%5', information = '%6', publishingDate = %7, dueDate = %8, overdueFine = %9, cost = %10, type = '%11', status = '%12', borrowerID = '%13' WHERE bookID = %14" )
                            .arg( book.GetTitle(), book.GetAuthor(), book.GetSubject(), book.GetPublisher(), book.GetLocation(), book.GetInformation(), DateToString( book.GetPublishingDate() ), DateToString( book.GetDueDate() ), QString::number( book.GetOverdueFine() ) )
                            .arg( QString::number( book.GetCost() ), Book::GetTypeString( book.GetType() ), Book::GetStatusString( book.GetStatus() ), book.GetBorrowerID(), book.GetID() );

    if( !query.exec( command ) )
    {
        qDebug() << "Error updating book: ";
        qDebug() << query.lastError().text();
    }
}



//
// UpdatePhoneNumber
//
void DatabaseManager::Update( const BorrowerNumber& number ) const
{
    QSqlQuery           query;

    if( !query.exec( QString( "UPDATE BorrowerNumber SET phoneNumber = '%1' WHERE borrowerNumberID = %2" ).arg( number.GetPhoneNumber(), number.GetID() ) ) )
    {
        qDebug() << "Erroer updating number: ";
        qDebug() << query.lastError().text();
        return;
    }
}




//
// UpdatePhoneNumbers
//
void DatabaseManager::UpdatePhoneNumbers( const Borrower& borrower ) const
{
    for( const BorrowerNumber& number : borrower.GetPhoneNumbers() )
    {
        Update( number );
    }
}



//
// GetBorrowerWhere
//
Borrower DatabaseManager::GetBorrowerWhere( const QString& sqlWhere ) const
{
    // Run a select which will allow us to construct new borrower objects.
    QSqlQuery                   query;
    if( !query.exec( QString( "SELECT borrowerID, fullName, address, feeTotal, feeHistory FROM Borrower WHERE %1" ).arg( sqlWhere ) ) )
    {
        qDebug() << "Get borrowers where error: " << query.lastError().text();
        return Borrower();
    }

    if( query.next() )
    {
        Borrower            borrower( query.value( 0 ).toString(), query.value( 1 ).toString(), query.value( 2 ).toString(), query.value( 3 ).toFloat(), query.value( 4 ).toFloat(), QVector<BorrowerNumber>() );
        borrower.SetPhoneNumbers( GetNumbersWhere( QString( "borrowerID = %1" ).arg( borrower.GetID() ) ) );
        return borrower;
    }

    return Borrower();
}



//
// GetBookWhere
//
Book DatabaseManager::GetBookWhere( const QString& sqlWhere ) const
{
    QSqlQuery                   query;
    if( !query.exec( QString( "SELECT bookID, title, author, subject, publisher, publishingDate, location, status, overdueFine, cost, borrowerID, dueDate, information, type FROM Book WHERE %1" ).arg( sqlWhere ) ) )
    {
        qDebug() << "Get books where error: " << query.lastError().text();
        return Book();
    }

    if( query.next() )
    {
        return Book( query.value( 0 ).toString(), query.value( 1 ).toString(), query.value( 2 ).toString(), query.value( 3 ).toString(), query.value( 4 ).toString(),
                                 StringToDate( query.value( 5 ).toString() ), query.value( 6 ).toString(), Book::GetStringStatus( query.value( 7 ).toString() ),
                                 query.value( 8 ).toFloat(), query.value( 9 ).toFloat(), query.value( 12 ).toString(),
                                 Book::GetStringType( query.value( 13 ).toString() ), query.value( 10 ).toString(), StringToDate( query.value( 11 ).toString() ) );
    }

    return Book();
}



//
// GetNumbersWhere
//
QVector<BorrowerNumber> DatabaseManager::GetNumbersWhere( const QString& sqlWhere ) const
{
    // Run a select which will allow us to construct new BorrowerNumber objects.
    QSqlQuery                   query;
    if( !query.exec( QString( "SELECT borrowerNumberID, phoneNumber, borrowerID FROM BorrowerNumber WHERE %1" ).arg( sqlWhere ) ) )
    {
        qDebug() << "Get numbers where error: " << query.lastError().text();
        return QVector<BorrowerNumber>();
    }

    // Add to the QVector of numbers until we run out of rows.
    QVector<BorrowerNumber>     results;
    while( query.next() )
    {
        // value of 0 is borrowerNumberID, value of 1 is phoneNumber, and value of 2 is borrowerID.
        results.push_back( BorrowerNumber( query.value( 0 ).toString(), query.value( 1 ).toString(), query.value( 2 ).toString() ) );
    }

    return results;
}



//
// GetBooksWhere
//
QVector<Book> DatabaseManager::GetBooksWhere( const QString& sqlWhere ) const
{
    QSqlQuery                   query;
    if( !query.exec( QString( "SELECT bookID, title, author, subject, publisher, publishingDate, location, status, overdueFine, cost, borrowerID, dueDate, information, type FROM Book WHERE %1" ).arg( sqlWhere ) ) )
    {
        qDebug() << "Get books where error: " << query.lastError().text();
        return QVector<Book>();
    }

    QVector<Book>       books;
    while( query.next() )
    {
        books.push_back( Book( query.value( 0 ).toString(), query.value( 1 ).toString(), query.value( 2 ).toString(), query.value( 3 ).toString(), query.value( 4 ).toString(),
                                 StringToDate( query.value( 5 ).toString() ), query.value( 6 ).toString(), Book::GetStringStatus( query.value( 7 ).toString() ),
                                 query.value( 8 ).toFloat(), query.value( 9 ).toFloat(), query.value( 12 ).toString(),
                                 Book::GetStringType( query.value( 13 ).toString() ), query.value( 10 ).toString(), StringToDate( query.value( 11 ).toString() ) ) );
    }

    return books;
}



// Private:



//
// DateToString
//
QString DatabaseManager::DateToString( const QDate& date ) const
{
    return QString( "#" ) + date.toString( dateFormat ).replace( ".", "-" ) + QString( "#" );
}



//
// StringToDate
//
QDate DatabaseManager::StringToDate( const QString& str ) const
{
    QStringList        tokens = str.split( "T" );
    if( tokens.size() < 1 )
    {
        return QDate( 0, 0, 0 );
    }


    tokens = tokens[0].split( "-" );
    if( tokens.size() != 3 )
    {
        return QDate( 0, 0, 0 );
    }

    return QDate( tokens.at( 0 ).toInt(), tokens.at( 1 ).toInt(), tokens.at( 2 ).toInt() );
}
